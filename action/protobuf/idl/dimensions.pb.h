// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dimensions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dimensions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dimensions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dimensions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dimensions_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dimensions_2eproto;
namespace test {
class DimensionProto;
struct DimensionProtoDefaultTypeInternal;
extern DimensionProtoDefaultTypeInternal _DimensionProto_default_instance_;
class DimensionProto_DimensionsEntry_DoNotUse;
struct DimensionProto_DimensionsEntry_DoNotUseDefaultTypeInternal;
extern DimensionProto_DimensionsEntry_DoNotUseDefaultTypeInternal _DimensionProto_DimensionsEntry_DoNotUse_default_instance_;
class DimensionValues;
struct DimensionValuesDefaultTypeInternal;
extern DimensionValuesDefaultTypeInternal _DimensionValues_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::DimensionProto* Arena::CreateMaybeMessage<::test::DimensionProto>(Arena*);
template<> ::test::DimensionProto_DimensionsEntry_DoNotUse* Arena::CreateMaybeMessage<::test::DimensionProto_DimensionsEntry_DoNotUse>(Arena*);
template<> ::test::DimensionValues* Arena::CreateMaybeMessage<::test::DimensionValues>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

// ===================================================================

class DimensionValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.DimensionValues) */ {
 public:
  inline DimensionValues() : DimensionValues(nullptr) {}
  ~DimensionValues() override;
  explicit PROTOBUF_CONSTEXPR DimensionValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DimensionValues(const DimensionValues& from);
  DimensionValues(DimensionValues&& from) noexcept
    : DimensionValues() {
    *this = ::std::move(from);
  }

  inline DimensionValues& operator=(const DimensionValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimensionValues& operator=(DimensionValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DimensionValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const DimensionValues* internal_default_instance() {
    return reinterpret_cast<const DimensionValues*>(
               &_DimensionValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DimensionValues& a, DimensionValues& b) {
    a.Swap(&b);
  }
  inline void Swap(DimensionValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DimensionValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DimensionValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DimensionValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DimensionValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DimensionValues& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.DimensionValues";
  }
  protected:
  explicit DimensionValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated string value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:test.DimensionValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dimensions_2eproto;
};
// -------------------------------------------------------------------

class DimensionProto_DimensionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DimensionProto_DimensionsEntry_DoNotUse, 
    std::string, ::test::DimensionValues,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DimensionProto_DimensionsEntry_DoNotUse, 
    std::string, ::test::DimensionValues,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DimensionProto_DimensionsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR DimensionProto_DimensionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DimensionProto_DimensionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DimensionProto_DimensionsEntry_DoNotUse& other);
  static const DimensionProto_DimensionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DimensionProto_DimensionsEntry_DoNotUse*>(&_DimensionProto_DimensionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "test.DimensionProto.DimensionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_dimensions_2eproto;
};

// -------------------------------------------------------------------

class DimensionProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.DimensionProto) */ {
 public:
  inline DimensionProto() : DimensionProto(nullptr) {}
  ~DimensionProto() override;
  explicit PROTOBUF_CONSTEXPR DimensionProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DimensionProto(const DimensionProto& from);
  DimensionProto(DimensionProto&& from) noexcept
    : DimensionProto() {
    *this = ::std::move(from);
  }

  inline DimensionProto& operator=(const DimensionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimensionProto& operator=(DimensionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DimensionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DimensionProto* internal_default_instance() {
    return reinterpret_cast<const DimensionProto*>(
               &_DimensionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DimensionProto& a, DimensionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DimensionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DimensionProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DimensionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DimensionProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DimensionProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DimensionProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.DimensionProto";
  }
  protected:
  explicit DimensionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 1,
  };
  // map<string, .test.DimensionValues> dimensions = 1;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::test::DimensionValues >&
      _internal_dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::test::DimensionValues >*
      _internal_mutable_dimensions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::test::DimensionValues >&
      dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::test::DimensionValues >*
      mutable_dimensions();

  // @@protoc_insertion_point(class_scope:test.DimensionProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DimensionProto_DimensionsEntry_DoNotUse,
      std::string, ::test::DimensionValues,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> dimensions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dimensions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DimensionValues

// repeated string value = 1;
inline int DimensionValues::_internal_value_size() const {
  return value_.size();
}
inline int DimensionValues::value_size() const {
  return _internal_value_size();
}
inline void DimensionValues::clear_value() {
  value_.Clear();
}
inline std::string* DimensionValues::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:test.DimensionValues.value)
  return _s;
}
inline const std::string& DimensionValues::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& DimensionValues::value(int index) const {
  // @@protoc_insertion_point(field_get:test.DimensionValues.value)
  return _internal_value(index);
}
inline std::string* DimensionValues::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:test.DimensionValues.value)
  return value_.Mutable(index);
}
inline void DimensionValues::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test.DimensionValues.value)
}
inline void DimensionValues::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test.DimensionValues.value)
}
inline void DimensionValues::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.DimensionValues.value)
}
inline void DimensionValues::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.DimensionValues.value)
}
inline std::string* DimensionValues::_internal_add_value() {
  return value_.Add();
}
inline void DimensionValues::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.DimensionValues.value)
}
inline void DimensionValues::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test.DimensionValues.value)
}
inline void DimensionValues::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.DimensionValues.value)
}
inline void DimensionValues::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.DimensionValues.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DimensionValues::value() const {
  // @@protoc_insertion_point(field_list:test.DimensionValues.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DimensionValues::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:test.DimensionValues.value)
  return &value_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DimensionProto

// map<string, .test.DimensionValues> dimensions = 1;
inline int DimensionProto::_internal_dimensions_size() const {
  return dimensions_.size();
}
inline int DimensionProto::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void DimensionProto::clear_dimensions() {
  dimensions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::test::DimensionValues >&
DimensionProto::_internal_dimensions() const {
  return dimensions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::test::DimensionValues >&
DimensionProto::dimensions() const {
  // @@protoc_insertion_point(field_map:test.DimensionProto.dimensions)
  return _internal_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::test::DimensionValues >*
DimensionProto::_internal_mutable_dimensions() {
  return dimensions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::test::DimensionValues >*
DimensionProto::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_map:test.DimensionProto.dimensions)
  return _internal_mutable_dimensions();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dimensions_2eproto
